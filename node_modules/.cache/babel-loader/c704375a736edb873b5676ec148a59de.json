{"ast":null,"code":"var _jsxFileName = \"/Users/vikramkhandelwal/pre_website/src/components/VisionDeck/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useSprings } from \"react-spring\";\nimport { useGesture } from \"react-with-gesture\";\nimport VisionCard from \"../VisionCard\";\nimport \"./Deck.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cards = [1, 2, 3];\nconst objs = [{\n  text: \"To cultivate a collaborative community of driven scholars\"\n}, {\n  text: \"To foster industry level education\"\n}, {\n  text: \"To encourage real-world application and evaluation\"\n}];\n\nconst to = i => ({\n  x: 0,\n  y: i * -10,\n  scale: 1,\n  rot: -10 + Math.random() * 20,\n  delay: i * 100\n});\n\nconst from = i => ({\n  rot: 0,\n  scale: 1.5,\n  y: -1000\n});\n\nconst trans = (r, s) => `perspective(100000px) rotateX(0deg) rotateY(${0}deg) rotateZ(${r}deg) scale(${s})`;\n\nfunction SwipeAuto() {}\n\n_c = SwipeAuto;\n\nfunction VisionDeck() {\n  _s();\n\n  const [gone] = useState(() => new Set());\n  const [props, set] = useSprings(cards.length, i => ({ ...to(i),\n    from: from(i)\n  }));\n\n  const SwipeAuto = argus => {\n    const {\n      args: [index],\n      down,\n      delta: [xDelta],\n      distance,\n      direction: [xDir],\n      velocity\n    } = argus;\n    const trigger = velocity > 0.2;\n    const dir = xDir < 0 ? -1 : 1;\n    if (!down && trigger) gone.add(index);\n    set(i => {\n      if (index !== i) return;\n      const isGone = gone.has(index);\n      const x = isGone ? (200 + window.innerWidth) * dir : down ? xDelta : 0;\n      const rot = xDelta / 100 + (isGone ? dir * 10 * velocity : 0);\n      const scale = down ? 1.1 : 1;\n      return {\n        x,\n        rot,\n        scale,\n        delay: undefined,\n        config: {\n          friction: 50,\n          tension: down ? 800 : isGone ? 200 : 500\n        }\n      };\n    });\n    if (!down && gone.size === cards.length) setTimeout(() => gone.clear() || set(i => to(i)), 600);\n  };\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const argus = {\n        args: [cards.length - gone.size - 1],\n        down: 0,\n        delta: [10],\n        distance: 3,\n        direction: [0.5 - gone.size % 2],\n        velocity: 0.5\n      };\n      SwipeAuto(argus);\n    }, 6000);\n    return () => clearInterval(interval);\n  }, []);\n  const bind = useGesture(_ref => {\n    let {\n      args: [index],\n      down,\n      delta: [xDelta],\n      distance,\n      direction: [xDir],\n      velocity\n    } = _ref;\n    const trigger = velocity > 0.2;\n    const dir = 2 * (0.5 - index % 2);\n    set(i => {\n      if (index !== i) return;\n      const isGone = gone.has(index);\n      const x = isGone ? (200 + window.innerWidth) * dir : 0;\n      const rot = xDelta / 100 + (isGone ? dir * 10 * velocity : 0);\n      const scale = down ? 1.1 : 1;\n      return {\n        x,\n        rot,\n        scale,\n        delay: undefined,\n        config: {\n          friction: 50,\n          tension: down ? 800 : isGone ? 200 : 500\n        }\n      };\n    });\n    if (!down && gone.size === cards.length) setTimeout(() => gone.clear() || set(i => to(i)), 600);\n  });\n  return props.map((_ref2, i) => {\n    let {\n      x,\n      y,\n      rot,\n      scale\n    } = _ref2;\n    return /*#__PURE__*/_jsxDEV(VisionCard, {\n      i: i,\n      x: x,\n      y: y,\n      rot: rot,\n      scale: scale,\n      trans: trans,\n      cards: cards,\n      objs: objs,\n      bind: bind,\n      class: \"visionCard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 5\n    }, this);\n  });\n}\n\n_s(VisionDeck, \"TN3jaVELdKY4oyBIZXZxGSb1Rhg=\", false, function () {\n  return [useSprings, useGesture];\n});\n\n_c2 = VisionDeck;\nexport default VisionDeck;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SwipeAuto\");\n$RefreshReg$(_c2, \"VisionDeck\");","map":{"version":3,"sources":["/Users/vikramkhandelwal/pre_website/src/components/VisionDeck/index.js"],"names":["React","useState","useEffect","useSprings","useGesture","VisionCard","cards","objs","text","to","i","x","y","scale","rot","Math","random","delay","from","trans","r","s","SwipeAuto","VisionDeck","gone","Set","props","set","length","argus","args","index","down","delta","xDelta","distance","direction","xDir","velocity","trigger","dir","add","isGone","has","window","innerWidth","undefined","config","friction","tension","size","setTimeout","clear","interval","setInterval","clearInterval","bind","map"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useSprings } from \"react-spring\";\nimport { useGesture } from \"react-with-gesture\";\nimport VisionCard from \"../VisionCard\";\n\nimport \"./Deck.css\";\n\nconst cards = [1, 2, 3];\n\nconst objs = [\n  {\n    text: \"To cultivate a collaborative community of driven scholars\"\n  },\n  {\n    text:\n      \"To foster industry level education\"\n  },\n  {\n    text: \"To encourage real-world application and evaluation\"\n  }\n];\n\nconst to = i => ({\n  x: 0,\n  y: i * -10,\n  scale: 1,\n  rot: -10 + Math.random() * 20,\n  delay: i * 100\n});\nconst from = i => ({ rot: 0, scale: 1.5, y: -1000 });\n\nconst trans = (r, s) =>\n  `perspective(100000px) rotateX(0deg) rotateY(${0\n    }deg) rotateZ(${r}deg) scale(${s})`;\n\nfunction SwipeAuto() {\n  \n}\n\nfunction VisionDeck() {\n  const [gone] = useState(() => new Set());\n\n  const [props, set] = useSprings(cards.length, i => ({\n    ...to(i),\n    from: from(i)\n  }));\n\n  const SwipeAuto = (argus) => {\n    const {\n      args: [index],\n      down,\n      delta: [xDelta],\n      distance,\n      direction: [xDir],\n      velocity\n    } = argus;\n\n    const trigger = velocity > 0.2;\n\n    const dir = xDir < 0 ? -1 : 1;\n\n    if (!down && trigger) gone.add(index);\n\n    set(i => {\n      if (index !== i) return;\n      const isGone = gone.has(index);\n\n      const x = isGone ? (200 + window.innerWidth) * dir : down ? xDelta : 0;\n\n      const rot = xDelta / 100 + (isGone ? dir * 10 * velocity : 0);\n\n      const scale = down ? 1.1 : 1;\n      return {\n        x,\n        rot,\n        scale,\n        delay: undefined,\n        config: { friction: 50, tension: down ? 800 : isGone ? 200 : 500 }\n      };\n    });\n\n    if (!down && gone.size === cards.length)\n      setTimeout(() => gone.clear() || set(i => to(i)), 600);\n  }\n  \n\n  useEffect(() => {\n    \n    const interval = setInterval(() => {\n      const argus = {\n        args: [cards.length - gone.size-1],\n        down: 0,\n        delta: [10],\n        distance: 3,\n        direction: [0.5-gone.size%2],\n        velocity: 0.5\n      };\n      SwipeAuto(argus);\n    }, 6000);\n    return () => clearInterval(interval);\n  }, []);\n\n  const bind = useGesture(\n    ({\n      args: [index],\n      down,\n      delta: [xDelta],\n      distance,\n      direction: [xDir],\n      velocity\n    }) => {\n      const trigger = velocity > 0.2;\n\n      const dir = 2*(0.5-index%2)\n\n      set(i => {\n        if (index !== i) return;\n        const isGone = gone.has(index);\n\n        const x = isGone ? (200 + window.innerWidth) * dir : 0;\n\n        const rot = xDelta / 100 + (isGone ? dir * 10 * velocity : 0);\n\n        const scale = down ? 1.1 : 1;\n        return {\n          x,\n          rot,\n          scale,\n          delay: undefined,\n          config: { friction: 50, tension: down ? 800 : isGone ? 200 : 500 }\n        };\n      });\n\n      if (!down && gone.size === cards.length)\n        setTimeout(() => gone.clear() || set(i => to(i)), 600);\n    }\n  );\n\n  return props.map(({ x, y, rot, scale }, i) => (\n    <VisionCard\n      i={i}\n      x={x}\n      y={y}\n      rot={rot}\n      scale={scale}\n      trans={trans}\n      cards={cards}\n      objs={objs}\n      bind={bind}\n      class = \"visionCard\"\n    />\n  ));\n}\n\nexport default VisionDeck;\n"]},"metadata":{},"sourceType":"module"}